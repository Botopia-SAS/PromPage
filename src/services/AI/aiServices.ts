import OpenAI from 'openai';
import { config } from '../../config';
import { processImage } from "../../services/AI/ocrService";
import fs from "fs";
import fetch from "node-fetch";
import path, { dirname } from "path";
import { exec } from "child_process";
import util from "util";
import { fileURLToPath } from "url";

// Definir __dirname en ES Module
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

class aiServices {
    private openAI: OpenAI;
    private processingQueue: Map<string, boolean> = new Map();
    private maxConcurrentRequests = 3; // M√°ximo 3 generaciones simult√°neas

    constructor() {
        this.openAI = new OpenAI({
            apiKey: config.ApiKey,
        });
    }

    async chat(
        prompt: string,
        messages: { role: string; content: string }[]
      ): Promise<string> {
        // Configurar mensaje para asesor√≠a de dise√±o web
        const systemPrompt = `Eres una asesora experta en dise√±o y desarrollo web. Tu personalidad es:
        - Muy amigable y profesional
        - Paciente y comprensiva con clientes que no conocen t√©rminos t√©cnicos
        - Entusiasta sobre los proyectos web
        - Siempre das sugerencias √∫tiles y constructivas
        - Usas lenguaje simple y evitas tecnicismos innecesarios
        - Incluyes emojis ocasionalmente para ser m√°s cercana
        - Respondes de forma concisa pero completa
        - Nunca pongas m√°s dos asteriscos (*) juntos o seguidos
        
        Contexto del negocio:
        - Ofrecemos dise√±o web personalizado
        - Incluimos SEO b√°sico en todos los proyectos
        - Ofrecemos mantenimiento mensual opcional
        - Aceptamos pagos en efectivo, transferencia y tarjeta
        
        Responde la siguiente pregunta del cliente de manera √∫til y amigable:`;
        
        // Construir mensajes para OpenAI
        const conversationMessages = [
            { role: "system" as const, content: systemPrompt },
            ...messages.map(msg => ({ role: msg.role as "user" | "assistant", content: msg.content })),
            { role: "user" as const, content: prompt }
        ];
      
        try {
          const response = await this.openAI.chat.completions.create({
            model: config.Model || 'gpt-4o-mini',
            messages: conversationMessages,
            max_tokens: 400,
            temperature: 0.7,
          });
          
          return response.choices[0]?.message?.content?.trim() || "-ERROR-";
        } catch (err: any) {
          console.error("‚ùå Error OpenAI:", err);
          return "-ERROR-";
        }
      }

    async detectIntent(text: string): Promise<string> {
        try {
            console.log("üîç Enviando texto a IA para analizar intenci√≥n...");

            const prompt = `Eres un clasificador de intenciones para un asistente de creaci√≥n de sitios web (similar a V0 pero en WhatsApp).
                            Devuelve SOLO una (1) etiqueta EXACTA de la siguiente lista (sin comillas, sin texto adicional):
                            - FAQ
                            - CREATE_WEB_PAGE
                            - STARTSUBSCRIPTION
                            - CHANCE_SUBSCRIPTION
                            - CANCEL_SUBSCRIPTION
                            - NO_DETECTED

                            Criterios:
                            FAQ: El usuario saluda o hace una pregunta general o t√©cnica (hosting, dominio, SEO, c√≥mo funciona, precios en abstracto, diferencias de tecnolog√≠as, soporte, dudas sobre el servicio, preguntas abiertas o saludos normales).
                            CREATE_WEB_PAGE: El usuario expresa que quiere crear / hacer / desarrollar / levantar / construir / lanzar / montar una p√°gina, sitio, landing, web, ecommerce, tienda online, portafolio, blog o empezar un proyecto web. Tambi√©n si pide que le empieces a crear algo concreto para su web.
                            STARTSUBSCRIPTION: El usuario quiere iniciar, activar, contratar, suscribirse, pagar plan, comenzar membres√≠a, adquirir suscripci√≥n. IMPORTANTE: Si dice exactamente "suscribirse" es SIEMPRE STARTSUBSCRIPTION.
                            CHANCE_SUBSCRIPTION: (Cambio de plan) El usuario quiere cambiar, mejorar, bajar, migrar, modificar su plan o tipo de suscripci√≥n.
                            CANCEL_SUBSCRIPTION: El usuario quiere cancelar, dar de baja, terminar, finalizar, suspender su suscripci√≥n/plan.
                            NO_DETECTED: No encaja claramente en ninguna de las anteriores (mensajes vac√≠os, ruido, irrelevante).

                            Reglas:
                            - Si menciona crear o tener una web Y tambi√©n pregunta algo t√©cnico, prioriza CREATE_WEB_PAGE.
                            - Si menciona cancelar y tambi√©n cambiar, prioriza CANCEL_SUBSCRIPTION.
                            - No inventes etiquetas.
                            - Si el usuario saluda sienmpre es FAQ.

                            Texto a clasificar: "${text}"`;

            const response = await this.openAI.chat.completions.create({
                model: config.Model || 'gpt-4o-mini',
                messages: [{ role: "user", content: prompt }],
                max_tokens: 100,
                temperature: 0.1,
            });

            console.log("‚úÖ Respuesta de IA recibida.");
            console.log("Respuesta completa de IA:", JSON.stringify(response, null, 2));
            
            let intentText = response.choices[0]?.message?.content?.trim() || "NO_DETECTED";
            
            // Sanitizar: dejar solo etiqueta v√°lida
            const valid = ["FAQ","CREATE_WEB_PAGE","STARTSUBSCRIPTION","CHANCE_SUBSCRIPTION","CANCEL_SUBSCRIPTION","NO_DETECTED"];
            if (!valid.includes(intentText)) intentText = "NO_DETECTED";
            return intentText;
        } catch (error) {
            console.error("‚ùå Error detectando intenci√≥n:", error);
            return "NO_DETECTED";
        }
    }

    async extractTextFromImage(imageUrl: string): Promise<string> {
        try {

            // Configurar headers con el token de WhatsApp (si es necesario)
            const headers = {
                "Authorization": `Bearer ${process.env.jwtToken}`,
                "Accept": "image/jpeg, image/png, image/webp"
            };

            console.log("üîÑ Realizando solicitud HTTP para descargar la imagen...");
            const response = await fetch(imageUrl, { headers });

            console.log("üîç C√≥digo de estado HTTP:", response.status);
            if (!response.ok) {
                console.error("‚ùå Error al descargar la imagen:", response.statusText);
                return "";
            }

            console.log("‚úÖ Imagen descargada correctamente.");
            const imageBuffer = Buffer.from(await response.arrayBuffer());

            // Guarda la imagen temporalmente en disco antes de procesarla
            const tempDir = path.resolve(__dirname, "../../temp");
            await fs.promises.mkdir(tempDir, { recursive: true });

            const imagePath = path.join(tempDir, `temp_image_${Date.now()}.jpg`);
            console.log("üíæ Guardando imagen en:", imagePath);
            await fs.promises.writeFile(imagePath, imageBuffer);

            console.log("üîç Verificando si el archivo fue guardado correctamente...");
            if (!fs.existsSync(imagePath)) {
                console.error("‚ùå Error: La imagen no fue guardada correctamente en el sistema de archivos.");
                return "";
            }

            console.log("‚úÖ Imagen guardada con √©xito. Procediendo con el OCR...");

            // Procesa la imagen con OCR
            const extractedText = await processImage(imagePath);

            console.log("‚úÖ OCR completado. Texto extra√≠do:", extractedText);

            // Elimina el archivo temporal despu√©s de procesarlo
            await fs.promises.unlink(imagePath);
            console.log("üóëÔ∏è Imagen temporal eliminada.");

            return extractedText || "";
        } catch (error) {
            console.error("‚ùå Error en OCR:", error);
            return "";
        }
    }

    async processAudio(audioUrl: string): Promise<string> {
        try {
            console.log(`üîΩ Descargando audio desde: ${audioUrl}`);
            const execPromise = util.promisify(exec);


            const response = await fetch(audioUrl, {
                method: "GET",
                headers: {
                    "Authorization": `Bearer ${process.env.jwtToken}`, // Token de WhatsApp
                    "Accept": "audio/ogg"
                }
            });

            if (!response.ok) throw new Error(`Error al descargar el audio. C√≥digo: ${response.status}`);

            const audioBuffer = Buffer.from(await response.arrayBuffer());
            // Simular __dirname en ES Module
            const __filename = fileURLToPath(import.meta.url);
            const __dirname = dirname(__filename);

            const tempDir = path.resolve(__dirname, "../../temp");

            await fs.promises.mkdir(tempDir, { recursive: true });

            const inputAudioPath = path.join(tempDir, "temp_audio.ogg");
            const outputAudioPath = path.join(tempDir, "temp_audio.wav");

            await fs.promises.writeFile(inputAudioPath, audioBuffer);
            console.log("‚úÖ Audio descargado correctamente.");

            console.log("üéôÔ∏è Convirtiendo audio a WAV...");
            await execPromise(`ffmpeg -y -i "${inputAudioPath}" -ar 16000 -ac 1 -c:a pcm_s16le "${outputAudioPath}"`);

            console.log("‚úÖ Conversi√≥n completada.");


            console.log("‚è≥ Enviando audio a OpenAI Whisper...");
            const transcriptionResponse = await this.openAI.audio.transcriptions.create({
                file: fs.createReadStream(outputAudioPath),
                model: "whisper-1",
                language: "es",
            });

            const transcription = transcriptionResponse.text;

            console.log("‚úÖ Transcripci√≥n completada:", transcription);

            // Eliminar archivos temporales
            await fs.promises.unlink(inputAudioPath);
            await fs.promises.unlink(outputAudioPath);

            return transcription || "";
        } catch (error) {
            console.error("‚ùå Error en la transcripci√≥n de audio:", error);
            return "";
        }
    }

    // M√©todo heredado para compatibilidad - ya no se usa para dise√±o web
    async extractTransactionData(_text: string): Promise<any> {
        console.log("‚ö†Ô∏è extractTransactionData llamado pero no se usa en el bot de dise√±o web");
        return null;
    }

    // Analizar mensaje inicial del usuario para extraer informaci√≥n de la p√°gina web
    async analyzeWebPageRequest(userMessage: string): Promise<any> {
        try {
            const systemPrompt = `Eres un analizador experto de solicitudes de p√°ginas web.
            
            Tu tarea es extraer toda la informaci√≥n relevante del mensaje del usuario sobre la p√°gina web que quiere crear.
            
            Debes devolver un JSON con los siguientes campos (null si no se menciona):
            {
                "websiteType": "tipo de p√°gina (landing, portfolio, e-commerce, blog, corporativo, etc.)",
                "projectDescription": "descripci√≥n del proyecto o negocio",
                "mainObjective": "objetivo principal de la p√°gina",
                "targetAudience": "p√∫blico objetivo",
                "features": "funcionalidades mencionadas",
                "style": "estilo visual o preferencias de dise√±o",
                "colors": "colores mencionados",
                "content": "contenido disponible mencionado",
                "references": "referencias o ejemplos mencionados",
                "sections": "secciones espec√≠ficas mencionadas",
                "callToAction": "acci√≥n principal que quiere lograr",
                "additionalInfo": "cualquier otra informaci√≥n relevante"
            }
            
            IMPORTANTE: Solo extrae lo que el usuario menciona expl√≠citamente. No inventes informaci√≥n.`;

            const response = await this.openAI.chat.completions.create({
                model: config.Model || 'gpt-4o-mini',
                messages: [
                    { role: "system", content: systemPrompt },
                    { role: "user", content: `Analiza este mensaje y extrae la informaci√≥n sobre la p√°gina web solicitada:\n\n"${userMessage}"` }
                ],
                max_tokens: 500,
                temperature: 0.3,
                response_format: { type: "json_object" }
            });

            const extracted = JSON.parse(response.choices[0]?.message?.content || '{}');
            console.log("ü§ñ Informaci√≥n extra√≠da del mensaje:", extracted);
            return extracted;
        } catch (error) {
            console.error("‚ùå Error analizando mensaje:", error);
            return {};
        }
    }

    // Obtener estado de generaci√≥n de V0
    async getV0ChatStatus(chatId: string): Promise<{ success: boolean; status?: string; demoUrl?: string; error?: string }> {
        try {
            const response = await fetch(`https://api.v0.dev/v1/chats/${chatId}`, {
                method: 'GET',
                headers: {
                    'Authorization': `Bearer ${process.env.V0_API_KEY}`,
                    'Content-Type': 'application/json',
                }
            });

            if (!response.ok) {
                throw new Error(`Error obteniendo estado: ${response.status}`);
            }

            const result = await response.json() as any;
            
            return {
                success: true,
                status: result.status,
                demoUrl: result.demo || result.preview_url,
            };
        } catch (error: any) {
            console.error("‚ùå Error obteniendo estado de V0:", error);
            return {
                success: false,
                error: error.message
            };
        }
    }

    // Generar prompt optimizado para V0 usando ChatGPT
    async generateOptimizedV0Prompt(userInfo: any): Promise<string> {
        try {
            const systemPrompt = `Eres un experto en crear prompts para V0 (generador de p√°ginas web con IA de Vercel).
            
            Tu tarea es convertir la informaci√≥n del usuario en un prompt optimizado que genere una p√°gina web moderna, profesional y completamente funcional.
            
            ESTRUCTURA DEL PROMPT:
            1. Descripci√≥n general del proyecto y objetivo
            2. Tecnolog√≠as espec√≠ficas a usar (React, Next.js 14, Tailwind CSS, shadcn/ui)
            3. Estructura de secciones y layout
            4. Funcionalidades espec√≠ficas
            5. Estilo visual y branding
            6. Optimizaciones (SEO, performance, responsive)
            
            REGLAS IMPORTANTES:
            - Usa Next.js 14 con App Router
            - Incluye componentes de shadcn/ui
            - Usa Lucide React para iconos
            - Implementa modo oscuro con next-themes
            - Asegura dise√±o responsive con Tailwind
            - Incluye animaciones con Framer Motion
            - Optimiza para Core Web Vitals
            - Implementa SEO con meta tags apropiados
            - Si no puede colocar im√°genes que use √≠conos de Lucide React
            - Si no tiene contenido, genera texto de ejemplo relevante
            - No dejar contenido vac√≠o
            
            Genera un prompt de 400-600 palabras que sea extremadamente detallado y t√©cnico.`;

            const userPrompt = `Informaci√≥n completa del proyecto:
            
            INFORMACI√ìN B√ÅSICA:
            - Tipo de p√°gina: ${userInfo.websiteType || 'Sitio web moderno'}
            - Descripci√≥n del proyecto: ${userInfo.projectDescription || 'Proyecto web profesional'}
            - Objetivo principal: ${userInfo.mainObjective || 'Presentar servicios/productos de manera efectiva'}
            
            AUDIENCIA Y PROP√ìSITO:
            - P√∫blico objetivo: ${userInfo.targetAudience || 'Audiencia general'}
            - Call to Action principal: ${userInfo.callToAction || 'Contacto/Conversi√≥n'}
            
            DISE√ëO Y ESTILO:
            - Estilo visual: ${userInfo.style || 'Moderno y minimalista'}
            - Colores: ${userInfo.colors || 'Esquema de colores profesional'}
            - Branding: ${userInfo.brandingDetails || userInfo.hasBranding || 'Sin branding espec√≠fico, crear uno moderno'}
            
            ESTRUCTURA Y CONTENIDO:
            - Secciones: ${userInfo.sections || 'Hero, Servicios, Sobre nosotros, Testimonios, Contacto'}
            - Contenido disponible: ${userInfo.contentDetails || 'Generar contenido de ejemplo relevante'}
            
            FUNCIONALIDADES:
            - Features requeridas: ${userInfo.features || 'Formulario de contacto, galer√≠a, responsive'}
            
            REFERENCIAS Y ADICIONAL:
            - Referencias de dise√±o: ${userInfo.referenceDetails || 'Sitios web modernos y profesionales'}
            - Informaci√≥n adicional: ${userInfo.additionalInfo || 'N/A'}
            
            Crea un prompt t√©cnico y detallado para V0 que genere exactamente lo que el usuario necesita.`;

            const response = await this.openAI.chat.completions.create({
                model: config.Model || 'gpt-4o-mini',
                messages: [
                    { role: "system", content: systemPrompt },
                    { role: "user", content: userPrompt }
                ],
                max_tokens: 800,
                temperature: 0.7,
            });

            const generatedPrompt = response.choices[0]?.message?.content?.trim();
            
            console.log("üìù Prompt generado para V0:", generatedPrompt);
            
            return generatedPrompt || `Create a modern ${userInfo.websiteType} website using React, Next.js 14, and Tailwind CSS with responsive design and professional styling.`;
        } catch (error) {
            console.error("‚ùå Error generando prompt optimizado:", error);
            return `Create a modern ${userInfo.websiteType || 'website'} using Next.js 14, React, Tailwind CSS, and shadcn/ui components. Include responsive design, dark mode, and modern animations.`;
        }
    }

    // Generar p√°gina web con V0 Platform API con reintentos y manejo robusto
    async generateWithV0(userInfo: any, onProgress?: (message: string) => void): Promise<{ success: boolean; demoUrl?: string; chatId?: string; files?: any[]; error?: string }> {
        const userId = userInfo.userPhone || 'anonymous';
        
        // Sistema de cola para evitar saturar la API
        const currentProcessing = Array.from(this.processingQueue.values()).filter(Boolean).length;
        
        if (currentProcessing >= this.maxConcurrentRequests) {
            onProgress?.(`üö¶ Cola de generaci√≥n: ${currentProcessing} usuarios procesando. Esperando turno...`);
            
            // Esperar hasta que haya espacio en la cola
            let waitTime = 0;
            while (Array.from(this.processingQueue.values()).filter(Boolean).length >= this.maxConcurrentRequests) {
                await new Promise(resolve => setTimeout(resolve, 5000)); // Esperar 5 segundos
                waitTime += 5;
                
                if (waitTime % 15 === 0) { // Cada 15 segundos dar feedback
                    const currentQueue = Array.from(this.processingQueue.values()).filter(Boolean).length;
                    onProgress?.(`‚è≥ Esperando turno... ${currentQueue} usuarios adelante (${waitTime}s esperando)`);
                }
                
                // Timeout de cola despu√©s de 5 minutos
                if (waitTime >= 300) {
                    return {
                        success: false,
                        error: "La cola est√° muy saturada. Por favor, intenta nuevamente en 10-15 minutos."
                    };
                }
            }
        }
        
        // Marcar como procesando
        this.processingQueue.set(userId, true);
        onProgress?.("üü¢ Iniciando tu generaci√≥n...");
        
        try {
            const maxRetries = 3;
            let currentRetry = 0;

        // Funci√≥n para hacer una pausa
        const delay = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));

        // Funci√≥n para calcular el tiempo de espera (backoff exponencial)
        const getBackoffDelay = (retry: number) => Math.min(1000 * Math.pow(2, retry), 30000);

        while (currentRetry <= maxRetries) {
            try {
                if (currentRetry > 0) {
                    onProgress?.(`üîÑ Reintentando... (${currentRetry}/${maxRetries})`);
                    await delay(getBackoffDelay(currentRetry - 1));
                }

                onProgress?.("ü§ñ Optimizando prompt con ChatGPT...");
                console.log("üöÄ Generando prompt optimizado para V0...");
                const optimizedPrompt = await this.generateOptimizedV0Prompt(userInfo);
                
                onProgress?.("üöÄ Enviando solicitud a V0 Platform...");
                console.log("üöÄ Enviando solicitud a V0 Platform API...");
                console.log("üìù Prompt optimizado:", optimizedPrompt);
                
                // Crear AbortController para timeout personalizado (aumentado a 10 minutos)
                const controller = new AbortController();
                const timeoutId = setTimeout(() => controller.abort(), 600000); // 10 minutos timeout

                // Configurar feedback progresivo durante la espera
                const startTime = Date.now();
                let progressCount = 0;
                const progressInterval = setInterval(() => {
                    progressCount++;
                    const timeElapsed = Math.floor((Date.now() - startTime) / 1000);
                    
                    if (progressCount === 1) {
                        onProgress?.("‚è≥ V0 est√° analizando tu solicitud...");
                    } else if (progressCount === 2) {
                        onProgress?.("üîß Generando componentes de tu p√°gina...");
                    } else if (progressCount === 3) {
                        onProgress?.("üé® Aplicando estilos y dise√±o...");
                    } else {
                        onProgress?.(`‚ö° V0 sigue trabajando en tu p√°gina... (${timeElapsed}s transcurridos)`);
                    }
                }, 45000); // Cada 45 segundos
                
                try {
                    // Usando V0 Platform API para crear chat y generar aplicaci√≥n
                    const response = await fetch('https://api.v0.dev/v1/chats', {
                        method: 'POST',
                        headers: {
                            'Authorization': `Bearer ${process.env.V0_API_KEY}`,
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            message: optimizedPrompt,
                            model: 'v0-1.5-md' // Modelo recomendado para generaci√≥n de UI
                        }),
                        signal: controller.signal
                    });

                    clearTimeout(timeoutId);

                    if (!response.ok) {
                        const errorText = await response.text();
                        console.error("‚ùå Error response de V0:", response.status, errorText);
                        
                        // Si es un error 429 (rate limit), esperar m√°s tiempo
                        if (response.status === 429) {
                            throw new Error(`Rate limit alcanzado. Reintentando en ${getBackoffDelay(currentRetry) / 1000}s...`);
                        }
                        
                        throw new Error(`V0 API Error: ${response.status} - ${errorText}`);
                    }

                    onProgress?.("‚ö° Procesando respuesta de V0...");
                    const result = await response.json() as any;
                    console.log("‚úÖ Respuesta de V0 recibida:", JSON.stringify(result, null, 2));
                    
                    // Extraer informaci√≥n de la respuesta
                    const demoUrl = result.demo || result.preview_url || result.url;
                    const chatId = result.id;
                    const files = result.files || [];
                    
                    if (!demoUrl && !chatId) {
                        throw new Error("No se recibi√≥ URL de demo ni ID de chat de V0");
                    }
                    
                    onProgress?.("üéâ ¬°P√°gina generada exitosamente!");
                    return {
                        success: true,
                        demoUrl,
                        chatId,
                        files,
                    };

                } catch (fetchError: any) {
                    clearTimeout(timeoutId);
                    clearInterval(progressInterval);
                    throw fetchError;
                } finally {
                    clearInterval(progressInterval);
                }

            } catch (error: any) {
                console.error(`‚ùå Error generando con V0 (intento ${currentRetry + 1}):`, error);
                currentRetry++;

                // Errores que no ameritan reintento
                const noRetryErrors = [
                    'Invalid API key',
                    'Unauthorized',
                    'Forbidden',
                    'Bad Request'
                ];
                
                // AbortError s√≠ amerita reintento (puede ser problema temporal de V0)
                const isAbortError = error.type === 'aborted' || error.message?.includes('aborted');

                const shouldRetry = currentRetry <= maxRetries && 
                                 !noRetryErrors.some(noRetry => error.message?.includes(noRetry));

                if (!shouldRetry) {
                    return {
                        success: false,
                        error: this.formatV0Error(error, currentRetry)
                    };
                }

                // Si hay m√°s intentos, informar al usuario
                if (currentRetry <= maxRetries) {
                    const waitTime = Math.ceil(getBackoffDelay(currentRetry - 1) / 1000);
                    
                    if (isAbortError) {
                        onProgress?.(`‚è∞ V0 tard√≥ demasiado (timeout). Reintentando en ${waitTime}s... (${currentRetry}/${maxRetries})`);
                    } else {
                        onProgress?.(`‚ö†Ô∏è Error temporal. Reintentando en ${waitTime}s... (${currentRetry}/${maxRetries})`);
                    }
                }
            }
        }

            return {
                success: false,
                error: "Se agotaron todos los intentos de generaci√≥n"
            };
            
        } finally {
            // Limpiar de la cola cuando termine (√©xito o error)
            this.processingQueue.delete(userId);
        }
    }

    private formatV0Error(error: any, attempts: number): string {
        if (error.type === 'aborted' || error.message?.includes('aborted')) {
            return `La generaci√≥n de V0 tom√≥ m√°s de 5 minutos despu√©s de ${attempts} intentos. V0 est√° experimentando alta demanda. Intenta nuevamente en 10-15 minutos o simplifica tu descripci√≥n.`;
        }
        if (error.message?.includes('socket hang up')) {
            return `Error de conexi√≥n con V0 despu√©s de ${attempts} intentos. Por favor, intenta nuevamente en unos minutos.`;
        }
        if (error.message?.includes('timeout')) {
            return `La generaci√≥n tom√≥ demasiado tiempo despu√©s de ${attempts} intentos. Intenta con una descripci√≥n m√°s simple.`;
        }
        if (error.message?.includes('Rate limit')) {
            return `V0 est√° muy ocupado en este momento. Por favor, intenta nuevamente en 5-10 minutos.`;
        }
        return `Error despu√©s de ${attempts} intentos: ${error.message || 'Error desconocido'}`;
    }

}

export default new aiServices();
