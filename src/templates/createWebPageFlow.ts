import { addKeyword, EVENTS } from "@builderbot/bot";
import aiServices from "../services/AI/aiServices";
import usersDatabase from "../services/cloud/usersDatabase";

interface WebPageInfo {
    websiteType?: string;
    projectDescription?: string;
    mainObjective?: string;
    targetAudience?: string;
    features?: string;
    style?: string;
    sections?: string;
    callToAction?: string;
    userPhone?: string;
}

export const createWebPageFlow = addKeyword(EVENTS.ACTION)
    .addAction(async (ctx, { endFlow, flowDynamic, state }) => {
        // Verificar l√≠mites INMEDIATAMENTE y decidir qu√© hacer
        const contactId = ctx.from;
        
        try {
            console.log("üîç Verificando l√≠mites de p√°ginas para usuario:", contactId);
            
            // Verificar si el usuario puede crear una p√°gina
            let limitResult = await usersDatabase.canCreatePage(contactId);
            
            if (!limitResult.success) {
                // Si el usuario no existe en la base de datos adicional, crearlo autom√°ticamente
                if (limitResult.error === 'Usuario no encontrado') {
                    console.log("üîÑ Usuario existe en contacts pero no en users DB. Creando autom√°ticamente...");
                    
                    // Obtener el contact_id (UUID) de la tabla contacts
                    const contactUuid = await usersDatabase.getContactUuidByPhone(contactId);
                    if (!contactUuid) {
                        console.error("‚ùå No se pudo obtener UUID del contacto");
                        return endFlow("‚ùå Error configurando tu cuenta. Por favor, contacta soporte.");
                    }
                    
                    // Crear usuario b√°sico en la base de datos adicional
                    const createResult = await usersDatabase.createUser({
                        name: ctx.name || ctx.pushName || `Usuario ${contactId.slice(-4)}`,
                        email: `${contactId}@temp.com`,
                        contact_id: contactUuid,
                        tokens: 1 // Plan gratuito: 1 p√°gina
                    });
                    
                    if (!createResult.success) {
                        console.error("‚ùå Error creando usuario autom√°tico:", createResult.error);
                        return endFlow("‚ùå Error configurando tu cuenta. Por favor, contacta soporte.");
                    }
                    
                    console.log("‚úÖ Usuario creado autom√°ticamente en DB adicional");
                    
                    // Reintentar verificaci√≥n de l√≠mites
                    limitResult = await usersDatabase.canCreatePage(contactId);
                }
                
                if (!limitResult.success) {
                    console.error("‚ùå Error verificando l√≠mites despu√©s de crear usuario:", limitResult.error);
                    return endFlow("‚ùå Error verificando tu plan. Por favor, intenta nuevamente.");
                }
            }
            
            if (!limitResult.canCreate) {
                // Usuario ha alcanzado el l√≠mite - DETENER Y ENVIAR A SUSCRIPCI√ìN
                let limitMessage = `üö´ **Has alcanzado el l√≠mite de tu plan ${limitResult.planName}**\n\n`;
                limitMessage += `üìä **Estado actual:**\n`;
                limitMessage += `‚Ä¢ P√°ginas restantes: ${limitResult.remainingPages}\n`;
                limitMessage += `‚Ä¢ Plan actual: ${limitResult.planName}\n\n`;
                
                limitMessage += `üéØ **Planes disponibles:**\n\n`;
                limitMessage += `‚≠ê **Plan B√°sico ($9.99)**\n`;
                limitMessage += `‚Ä¢ 5 p√°ginas web\n\n`;
                
                limitMessage += `üöÄ **Plan Pro ($29.99)**\n`;
                limitMessage += `‚Ä¢ 15 p√°ginas web\n\n`;
                
                limitMessage += `üí° Escribe "suscribirse" para actualizar tu plan y crear m√°s p√°ginas.`;
                
                return endFlow(limitMessage);
            }
            
            // El usuario S√ç puede crear - CONTINUAR CON PRIMERA PREGUNTA
            console.log(`‚úÖ Usuario puede crear p√°gina. P√°ginas restantes: ${limitResult.remainingPages}`);
            
            await state.update({ 
                userPhone: ctx.from,
                remainingPages: limitResult.remainingPages 
            });
            
            // Enviar la primera pregunta directamente desde aqu√≠
            await flowDynamic("üé® ¬°Perfecto! Vamos a crear tu p√°gina web usando V0 de Vercel üöÄ\n\nüåê *¬øQu√© tipo de p√°gina web necesitas?*\n\nEjemplos: tienda online, portafolio, p√°gina corporativa, blog, etc.");
            
        } catch (error) {
            console.error("‚ùå Error verificando l√≠mites:", error);
            return endFlow("‚ùå Ocurri√≥ un error verificando tu plan. Por favor, intenta nuevamente.");
        }
    })
    .addAnswer(
        "",
        { capture: true },
        async (ctx, ctxFn) => {
            const websiteType = ctx.body.trim();
            await ctxFn.state.update({ websiteType });
        }
    )
    .addAnswer(
        "üìã *Cu√©ntame sobre tu proyecto o negocio*\n\n¬øA qu√© te dedicas? ¬øCu√°l es tu producto o servicio principal?",
        { capture: true },
        async (ctx, ctxFn) => {
            const projectDescription = ctx.body.trim();
            await ctxFn.state.update({ projectDescription });
        }
    )
    .addAnswer(
        "üéØ *¬øCu√°l es el objetivo principal de tu p√°gina web?*\n\nEjemplos: conseguir clientes, vender productos, mostrar trabajos, etc.",
        { capture: true },
        async (ctx, ctxFn) => {
            const mainObjective = ctx.body.trim();
            await ctxFn.state.update({ mainObjective });
        }
    )
    .addAnswer(
        "üë• *¬øQui√©n es tu p√∫blico objetivo?*\n\n¬øA qui√©n quieres llegar con tu p√°gina?",
        { capture: true },
        async (ctx, ctxFn) => {
            const targetAudience = ctx.body.trim();
            await ctxFn.state.update({ targetAudience });
        }
    )
    .addAnswer(
        "‚ö° *¬øQu√© funcionalidades necesitas?*\n\nEjemplos: formulario de contacto, galer√≠a, chat, carrito de compras, etc.",
        { capture: true },
        async (ctx, ctxFn) => {
            const features = ctx.body.trim();
            await ctxFn.state.update({ features });
        }
    )
    .addAnswer(
        "üé® *¬øQu√© estilo visual prefieres?*\n\n¬øTienes colores espec√≠ficos? ¬øQu√© sensaci√≥n quieres transmitir?",
        { capture: true },
        async (ctx, ctxFn) => {
            const style = ctx.body.trim();
            await ctxFn.state.update({ style });
        }
    )
    .addAnswer(
        "üìë *¬øQu√© secciones debe tener tu p√°gina?*\n\nEjemplos: inicio, servicios, sobre nosotros, testimonios, contacto, etc.",
        { capture: true },
        async (ctx, ctxFn) => {
            const sections = ctx.body.trim();
            await ctxFn.state.update({ sections });
        }
    )
    .addAnswer(
        "üöÄ *¬øCu√°l es la acci√≥n principal que quieres que realicen los visitantes?*\n\nEjemplos: contactarme, comprar, registrarse, descargar, etc.",
        { capture: true },
        async (ctx, ctxFn) => {
            const callToAction = ctx.body.trim();
            await ctxFn.state.update({ callToAction });
            
            // Procesar generaci√≥n de la p√°gina web (ya se verificaron l√≠mites al inicio)
            return await processWebPageGeneration(ctx, ctxFn);
        }
    );


async function processWebPageGeneration(_ctx: any, ctxFn: any) {
    try {
        const state = ctxFn.state.getMyState() as WebPageInfo;
        
        // Mostrar resumen
        let summary = "üìã *Resumen de tu p√°gina web:*\n\n";
        if (state.websiteType) summary += `‚Ä¢ Tipo: ${state.websiteType}\n`;
        if (state.projectDescription) summary += `‚Ä¢ Proyecto: ${state.projectDescription}\n`;
        if (state.mainObjective) summary += `‚Ä¢ Objetivo: ${state.mainObjective}\n`;
        if (state.targetAudience) summary += `‚Ä¢ Audiencia: ${state.targetAudience}\n`;
        if (state.features) summary += `‚Ä¢ Funcionalidades: ${state.features}\n`;
        if (state.style) summary += `‚Ä¢ Estilo: ${state.style}\n`;
        if (state.sections) summary += `‚Ä¢ Secciones: ${state.sections}\n`;
        if (state.callToAction) summary += `‚Ä¢ Call to Action: ${state.callToAction}\n`;
        
        await ctxFn.flowDynamic(summary);
        
        await ctxFn.flowDynamic("üîÑ *Iniciando generaci√≥n de tu p√°gina web...*\n\n‚è±Ô∏è Este proceso puede tomar 1-3 minutos\nüí° Te mantendr√© informado del progreso");
        
        // Configurar feedback progresivo
        let lastProgressTime = Date.now();
        const progressCallback = async (message: string) => {
            const now = Date.now();
            // Enviar updates cada 10 segundos o en cambios importantes
            if (now - lastProgressTime > 10000 || message.includes('üéâ') || message.includes('‚ö†Ô∏è')) {
                await ctxFn.flowDynamic(`${message}`);
                lastProgressTime = now;
            }
        };
        
        // Generar p√°gina con V0 con callback de progreso
        const result = await aiServices.generateWithV0(state, progressCallback);
        
        if (!result.success) {
            throw new Error(result.error || "Error desconocido al generar p√°gina");
        }
        
        // Guardar p√°gina creada en la base de datos
        const contactId = state.userPhone;
        if (contactId) {
            const userResult = await usersDatabase.getUserByContactId(contactId);
            if (userResult.success && userResult.user) {
                const pageData = {
                    user_id: userResult.user.id!,
                    title: state.websiteType || 'P√°gina Web',
                    description: state.projectDescription || '',
                    content: JSON.stringify({
                        websiteType: state.websiteType,
                        projectDescription: state.projectDescription,
                        mainObjective: state.mainObjective,
                        targetAudience: state.targetAudience,
                        features: state.features,
                        style: state.style,
                        sections: state.sections,
                        callToAction: state.callToAction
                    }),
                    public_link: result.demoUrl || '',
                    status: 'Active' as const,
                    requirements: `Objetivo: ${state.mainObjective}, Audiencia: ${state.targetAudience}, Funcionalidades: ${state.features}`
                };
                
                const saveResult = await usersDatabase.createPage(pageData);
                if (!saveResult.success) {
                    console.error("‚ö†Ô∏è Error guardando p√°gina en BD:", saveResult.error);
                    // Continuar aunque falle guardar en BD
                }
            }
        }
        
        // Respuesta exitosa
        let responseMessage = "üéâ *¬°Tu p√°gina web ha sido generada exitosamente!*\n\n";
        
        if (result.demoUrl) {
            responseMessage += `üîó *üåê LINK DE TU P√ÅGINA WEB:*\n${result.demoUrl}\n\n`;
        }
        
        if (result.chatId) {
            responseMessage += `üí¨ *ID del Proyecto:* ${result.chatId}\n\n`;
        }
        
        responseMessage += "‚ú® *Tu p√°gina incluye:*\n";
        responseMessage += `‚Ä¢ ${state.websiteType || 'P√°gina web'} profesional\n`;
        responseMessage += `‚Ä¢ Dise√±o responsive (m√≥vil, tablet, desktop)\n`;
        responseMessage += `‚Ä¢ Funcionalidades: ${state.features}\n`;
        responseMessage += `‚Ä¢ Secciones: ${state.sections}\n`;
        responseMessage += `‚Ä¢ Optimizado para: ${state.targetAudience}\n`;
        responseMessage += `‚Ä¢ Tecnolog√≠as: React + Next.js + Tailwind CSS\n\n`;
        
        if (result.files && result.files.length > 0) {
            responseMessage += `üìÅ *Archivos generados:* ${result.files.length} archivos\n\n`;
        }
        
        responseMessage += "üõ†Ô∏è *¬øNecesitas modificaciones?*\nPuedes pedirme cambios espec√≠ficos o crear otra p√°gina diferente.\n\n";
        responseMessage += "üöÄ *¬°Tu p√°gina est√° lista para compartir!*\n\n";
        responseMessage += "üí° *Siguiente paso:* Puedes personalizar el contenido, colores y funcionalidades directamente en V0.";
        
        return ctxFn.endFlow(responseMessage);
        
    } catch (error: any) {
        console.error("‚ùå Error generando p√°gina web:", error);
        
        let errorMessage = "üòî No pude completar la generaci√≥n de tu p√°gina web.\n\n";
        
        // Mensajes de error m√°s espec√≠ficos y √∫tiles
        if (error.message?.includes('conexi√≥n') || error.message?.includes('socket hang up')) {
            errorMessage += "üåê **Problema de conexi√≥n**\n";
            errorMessage += "V0 est√° experimentando problemas temporales.\n\n";
            errorMessage += "‚úÖ **¬øQu√© puedes hacer?**\n";
            errorMessage += "‚Ä¢ Espera 5-10 minutos e intenta nuevamente\n";
            errorMessage += "‚Ä¢ Escribe 'crear p√°gina web' para reintentar\n";
            errorMessage += "‚Ä¢ Si persiste, contacta soporte\n\n";
        } else if (error.message?.includes('Rate limit') || error.message?.includes('muy ocupado')) {
            errorMessage += "üö¶ **V0 est√° saturado**\n";
            errorMessage += "Hay muchas solicitudes simult√°neas.\n\n";
            errorMessage += "‚úÖ **¬øQu√© puedes hacer?**\n";
            errorMessage += "‚Ä¢ Espera 10-15 minutos e intenta nuevamente\n";
            errorMessage += "‚Ä¢ Tu solicitud est√° guardada, no necesitas empezar de nuevo\n\n";
        } else if (error.message?.includes('24 hours') || error.message?.includes('META ALERT')) {
            errorMessage += "‚è∞ **Ventana de conversaci√≥n cerrada**\n";
            errorMessage += "Han pasado m√°s de 24 horas desde tu √∫ltimo mensaje.\n\n";
            errorMessage += "‚úÖ **¬øQu√© puedes hacer?**\n";
            errorMessage += "‚Ä¢ Env√≠a cualquier mensaje para reabrir la conversaci√≥n\n";
            errorMessage += "‚Ä¢ Luego escribe 'crear p√°gina web' para continuar\n";
            errorMessage += "‚Ä¢ Tu progreso est√° guardado\n\n";
        } else if (error.message?.includes('timeout') || error.message?.includes('demasiado tiempo')) {
            errorMessage += "‚è±Ô∏è **Proceso muy largo**\n";
            errorMessage += "Tu descripci√≥n requiere mucho procesamiento.\n\n";
            errorMessage += "‚úÖ **¬øQu√© puedes hacer?**\n";
            errorMessage += "‚Ä¢ Simplifica tu descripci√≥n\n";
            errorMessage += "‚Ä¢ Divide tu proyecto en p√°ginas m√°s peque√±as\n";
            errorMessage += "‚Ä¢ Intenta nuevamente con menos secciones\n\n";
        } else if (error.message?.includes('intentos')) {
            errorMessage += "üîÑ **M√∫ltiples intentos fallidos**\n";
            errorMessage += "El sistema intent√≥ varias veces sin √©xito.\n\n";
            errorMessage += "‚úÖ **¬øQu√© puedes hacer?**\n";
            errorMessage += "‚Ä¢ Espera 15-20 minutos antes de reintentar\n";
            errorMessage += "‚Ä¢ Contacta soporte si es urgente\n";
            errorMessage += "‚Ä¢ Prueba con una descripci√≥n diferente\n\n";
        } else {
            errorMessage += `‚ö†Ô∏è **Error t√©cnico:** ${error.message}\n\n`;
            errorMessage += "‚úÖ **¬øQu√© puedes hacer?**\n";
            errorMessage += "‚Ä¢ Intenta nuevamente en unos minutos\n";
            errorMessage += "‚Ä¢ Contacta soporte si persiste\n\n";
        }
        
        errorMessage += "üÜò **Soporte:** Si necesitas ayuda inmediata, contacta +57 300 123 4567\n";
        errorMessage += "üí° **Tip:** Descripciones espec√≠ficas pero concisas funcionan mejor";
        
        return ctxFn.endFlow(errorMessage);
    }
}